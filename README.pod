=pod

=head1 NAME

Dir::ls - List the contents of a directory

=head1 SYNOPSIS

  use Dir::ls;
  
  print "$_\n" for ls; # defaults to current working directory
  
  print "$_: ", -s "/foo/bar/$_", "\n" for ls '/foo/bar', {-a => 1, sort => 'size'};

=head1 DESCRIPTION

Provides the function L</"ls">, which returns the contents of a directory in a
similar manner to the GNU coreutils command L<ls(1)>.

=head1 FUNCTIONS

=head2 ls

  my @contents = ls $dir, \%options;

Takes a directory path and optional hashref of options, and returns a list of
items in the directory. Home directories represented by C<~> will be expanded
by L<Path::ExpandTilde>. If no directory path is passed, the current working
directory will be used. Like in L<ls(1)>, the returned names are relative to
the passed directory path, so if you want to use a filename (such as passing it
to C<open> or C<stat>), you must prefix it with the directory path, with C<~>
expanded if present.

  # Check the size of a file in current user's home directory
  my @contents = ls '~';
  say -s "$ENV{HOME}/$contents[0]";

By default, hidden files and directories (those starting with C<.>) are
omitted, and the results are sorted by name according to the current locale
(see L<perllocale> for more information).

Accepts the following options (any prefixed hyphens are ignored):

=over 2

=item a

=item all

Include hidden files and directories.

=item A

=item almost-all

Include hidden files and directories, but not C<.> or C<..>.

=item B

=item ignore-backups

Omit files and directories ending in C<~>.

=item c

Sort by ctime (change time) in seconds since the epoch.

=item f

Equivalent to passing C<all> and setting C<sort> to C<none>.

=item F

=item classify

Append classification indicators to the end of file and directory names.
Equivalent to C<< 'indicator-style' => 'classify' >>.

=item file-type

Append file-type indicators to the end of file and directory names. Equivalent
to C<< 'indicator-style' => 'file-type' >>.

=item group-directories-first

Return directories then files. The C<sort> algorithm will be applied within
these groupings, but C<U> or C<< sort => 'none' >> will disable the grouping.

=item hide

Omit files and directories matching given L<Text::Glob> pattern. Overriden by
C<a>/C<all> or C<A>/C<almost-all>.

=item I

=item ignore

Omit files and directories matching given L<Text::Glob> pattern.

=item indicator-style

Append indicators to the end of filenames. Recognized styles are: C<none>
(default), C<slash> (appends C</> to directories), C<file-type> (appends all of
the below indicators except C<*>), and C<classify> (appends all of the below
indicators).

  / directory
  @ symbolic link
  = socket
  | named pipe (FIFO)
  * executable

Use of indicator types other than C<slash> will render the resulting filenames
suitable only for display due to the extra characters.

=item p

Append C</> to the end of directory names. Equivalent to
C<< 'indicator-style' => 'slash' >>.

=item r

=item reverse

Reverse sort order (unless C<U> or C<< sort => 'none' >> specified).

=item sort

Specify sort algorithm other than the default sort-by-name. Valid values are:
C<none>, C<extension>, C<size>, C<time>, or C<version>.

=item S

Sort by file size in bytes (descending). Equivalent to C<< sort => 'size' >>.

=item t

Sort by mtime (modification time) in seconds since the epoch. Equivalent to
C<< sort => 'time' >>.

=item u

Sort by atime (access time) in seconds since the epoch.

=item U

Return entries in directory order (unsorted). Equivalent to
C<< sort => 'none' >>.

=item v

Sort naturally by version numbers within the name. Uses L<Sort::filevercmp>
for sorting. Equivalent to C<< sort => 'version' >>.

=item X

Sort by (last) file extension, according to the current locale. Equivalent to
C<< sort => 'extension' >>.

=back

=head1 CAVEATS

This is only an approximation of L<ls(1)>. It makes an attempt to give the same
output under the supported options, but there may be differences in edge cases.
Weird things might happen with sorting of non-ASCII filenames, or on
non-Unixlike systems. Lots of options aren't supported yet. Patches welcome.

=head1 BUGS

Report any issues on the public bugtracker.

=head1 AUTHOR

Dan Book <dbook@cpan.org>

=head1 COPYRIGHT AND LICENSE

This software is Copyright (c) 2017 by Dan Book.

This is free software, licensed under:

  The Artistic License 2.0 (GPL Compatible)

=head1 SEE ALSO

L<Path::Tiny>, L<ls(1)>

=cut
